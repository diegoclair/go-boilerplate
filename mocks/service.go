// Code generated by MockGen. DO NOT EDIT.
// Source: application/contract/service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dto "github.com/diegoclair/go_boilerplate/application/dto"
	account "github.com/diegoclair/go_boilerplate/domain/account"
	transfer "github.com/diegoclair/go_boilerplate/domain/transfer"
	gomock "github.com/golang/mock/gomock"
)

// MockAccountService is a mock of AccountService interface.
type MockAccountService struct {
	ctrl     *gomock.Controller
	recorder *MockAccountServiceMockRecorder
}

// MockAccountServiceMockRecorder is the mock recorder for MockAccountService.
type MockAccountServiceMockRecorder struct {
	mock *MockAccountService
}

// NewMockAccountService creates a new mock instance.
func NewMockAccountService(ctrl *gomock.Controller) *MockAccountService {
	mock := &MockAccountService{ctrl: ctrl}
	mock.recorder = &MockAccountServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountService) EXPECT() *MockAccountServiceMockRecorder {
	return m.recorder
}

// AddBalance mocks base method.
func (m *MockAccountService) AddBalance(ctx context.Context, accountUUID string, amount float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBalance", ctx, accountUUID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBalance indicates an expected call of AddBalance.
func (mr *MockAccountServiceMockRecorder) AddBalance(ctx, accountUUID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBalance", reflect.TypeOf((*MockAccountService)(nil).AddBalance), ctx, accountUUID, amount)
}

// CreateAccount mocks base method.
func (m *MockAccountService) CreateAccount(ctx context.Context, account account.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", ctx, account)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockAccountServiceMockRecorder) CreateAccount(ctx, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockAccountService)(nil).CreateAccount), ctx, account)
}

// GetAccountByUUID mocks base method.
func (m *MockAccountService) GetAccountByUUID(ctx context.Context, accountUUID string) (account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByUUID", ctx, accountUUID)
	ret0, _ := ret[0].(account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByUUID indicates an expected call of GetAccountByUUID.
func (mr *MockAccountServiceMockRecorder) GetAccountByUUID(ctx, accountUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByUUID", reflect.TypeOf((*MockAccountService)(nil).GetAccountByUUID), ctx, accountUUID)
}

// GetAccounts mocks base method.
func (m *MockAccountService) GetAccounts(ctx context.Context, take, skip int64) ([]account.Account, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccounts", ctx, take, skip)
	ret0, _ := ret[0].([]account.Account)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAccounts indicates an expected call of GetAccounts.
func (mr *MockAccountServiceMockRecorder) GetAccounts(ctx, take, skip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccounts", reflect.TypeOf((*MockAccountService)(nil).GetAccounts), ctx, take, skip)
}

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// CreateSession mocks base method.
func (m *MockAuthService) CreateSession(ctx context.Context, session dto.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", ctx, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockAuthServiceMockRecorder) CreateSession(ctx, session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockAuthService)(nil).CreateSession), ctx, session)
}

// GetSessionByUUID mocks base method.
func (m *MockAuthService) GetSessionByUUID(ctx context.Context, sessionUUID string) (dto.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionByUUID", ctx, sessionUUID)
	ret0, _ := ret[0].(dto.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionByUUID indicates an expected call of GetSessionByUUID.
func (mr *MockAuthServiceMockRecorder) GetSessionByUUID(ctx, sessionUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionByUUID", reflect.TypeOf((*MockAuthService)(nil).GetSessionByUUID), ctx, sessionUUID)
}

// Login mocks base method.
func (m *MockAuthService) Login(ctx context.Context, cpf, secret string) (account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, cpf, secret)
	ret0, _ := ret[0].(account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthServiceMockRecorder) Login(ctx, cpf, secret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthService)(nil).Login), ctx, cpf, secret)
}

// MockTransferService is a mock of TransferService interface.
type MockTransferService struct {
	ctrl     *gomock.Controller
	recorder *MockTransferServiceMockRecorder
}

// MockTransferServiceMockRecorder is the mock recorder for MockTransferService.
type MockTransferServiceMockRecorder struct {
	mock *MockTransferService
}

// NewMockTransferService creates a new mock instance.
func NewMockTransferService(ctrl *gomock.Controller) *MockTransferService {
	mock := &MockTransferService{ctrl: ctrl}
	mock.recorder = &MockTransferServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransferService) EXPECT() *MockTransferServiceMockRecorder {
	return m.recorder
}

// CreateTransfer mocks base method.
func (m *MockTransferService) CreateTransfer(ctx context.Context, transfer transfer.Transfer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransfer", ctx, transfer)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTransfer indicates an expected call of CreateTransfer.
func (mr *MockTransferServiceMockRecorder) CreateTransfer(ctx, transfer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransfer", reflect.TypeOf((*MockTransferService)(nil).CreateTransfer), ctx, transfer)
}

// GetTransfers mocks base method.
func (m *MockTransferService) GetTransfers(ctx context.Context) ([]transfer.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransfers", ctx)
	ret0, _ := ret[0].([]transfer.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransfers indicates an expected call of GetTransfers.
func (mr *MockTransferServiceMockRecorder) GetTransfers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransfers", reflect.TypeOf((*MockTransferService)(nil).GetTransfers), ctx)
}

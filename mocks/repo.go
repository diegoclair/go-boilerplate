// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/diegoclair/go_boilerplate/domain/contract (interfaces: DataManager,AccountRepo,AuthRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	contract "github.com/diegoclair/go_boilerplate/domain/contract"
	entity "github.com/diegoclair/go_boilerplate/domain/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockDataManager is a mock of DataManager interface.
type MockDataManager struct {
	ctrl     *gomock.Controller
	recorder *MockDataManagerMockRecorder
}

// MockDataManagerMockRecorder is the mock recorder for MockDataManager.
type MockDataManagerMockRecorder struct {
	mock *MockDataManager
}

// NewMockDataManager creates a new mock instance.
func NewMockDataManager(ctrl *gomock.Controller) *MockDataManager {
	mock := &MockDataManager{ctrl: ctrl}
	mock.recorder = &MockDataManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataManager) EXPECT() *MockDataManagerMockRecorder {
	return m.recorder
}

// Account mocks base method.
func (m *MockDataManager) Account() contract.AccountRepo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Account")
	ret0, _ := ret[0].(contract.AccountRepo)
	return ret0
}

// Account indicates an expected call of Account.
func (mr *MockDataManagerMockRecorder) Account() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Account", reflect.TypeOf((*MockDataManager)(nil).Account))
}

// Auth mocks base method.
func (m *MockDataManager) Auth() contract.AuthRepo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth")
	ret0, _ := ret[0].(contract.AuthRepo)
	return ret0
}

// Auth indicates an expected call of Auth.
func (mr *MockDataManagerMockRecorder) Auth() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockDataManager)(nil).Auth))
}

// WithTransaction mocks base method.
func (m *MockDataManager) WithTransaction(arg0 context.Context, arg1 func(contract.DataManager) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTransaction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithTransaction indicates an expected call of WithTransaction.
func (mr *MockDataManagerMockRecorder) WithTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTransaction", reflect.TypeOf((*MockDataManager)(nil).WithTransaction), arg0, arg1)
}

// MockAccountRepo is a mock of AccountRepo interface.
type MockAccountRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAccountRepoMockRecorder
}

// MockAccountRepoMockRecorder is the mock recorder for MockAccountRepo.
type MockAccountRepoMockRecorder struct {
	mock *MockAccountRepo
}

// NewMockAccountRepo creates a new mock instance.
func NewMockAccountRepo(ctrl *gomock.Controller) *MockAccountRepo {
	mock := &MockAccountRepo{ctrl: ctrl}
	mock.recorder = &MockAccountRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountRepo) EXPECT() *MockAccountRepoMockRecorder {
	return m.recorder
}

// AddTransfer mocks base method.
func (m *MockAccountRepo) AddTransfer(arg0 context.Context, arg1 string, arg2, arg3 int64, arg4 float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTransfer", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTransfer indicates an expected call of AddTransfer.
func (mr *MockAccountRepoMockRecorder) AddTransfer(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTransfer", reflect.TypeOf((*MockAccountRepo)(nil).AddTransfer), arg0, arg1, arg2, arg3, arg4)
}

// CreateAccount mocks base method.
func (m *MockAccountRepo) CreateAccount(arg0 context.Context, arg1 entity.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockAccountRepoMockRecorder) CreateAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockAccountRepo)(nil).CreateAccount), arg0, arg1)
}

// GetAccountByDocument mocks base method.
func (m *MockAccountRepo) GetAccountByDocument(arg0 context.Context, arg1 string) (entity.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByDocument", arg0, arg1)
	ret0, _ := ret[0].(entity.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByDocument indicates an expected call of GetAccountByDocument.
func (mr *MockAccountRepoMockRecorder) GetAccountByDocument(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByDocument", reflect.TypeOf((*MockAccountRepo)(nil).GetAccountByDocument), arg0, arg1)
}

// GetAccountByUUID mocks base method.
func (m *MockAccountRepo) GetAccountByUUID(arg0 context.Context, arg1 string) (entity.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByUUID", arg0, arg1)
	ret0, _ := ret[0].(entity.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByUUID indicates an expected call of GetAccountByUUID.
func (mr *MockAccountRepoMockRecorder) GetAccountByUUID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByUUID", reflect.TypeOf((*MockAccountRepo)(nil).GetAccountByUUID), arg0, arg1)
}

// GetAccounts mocks base method.
func (m *MockAccountRepo) GetAccounts(arg0 context.Context, arg1, arg2 int64) ([]entity.Account, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccounts", arg0, arg1, arg2)
	ret0, _ := ret[0].([]entity.Account)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAccounts indicates an expected call of GetAccounts.
func (mr *MockAccountRepoMockRecorder) GetAccounts(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccounts", reflect.TypeOf((*MockAccountRepo)(nil).GetAccounts), arg0, arg1, arg2)
}

// GetTransfersByAccountID mocks base method.
func (m *MockAccountRepo) GetTransfersByAccountID(arg0 context.Context, arg1 int64, arg2 bool) ([]entity.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransfersByAccountID", arg0, arg1, arg2)
	ret0, _ := ret[0].([]entity.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransfersByAccountID indicates an expected call of GetTransfersByAccountID.
func (mr *MockAccountRepoMockRecorder) GetTransfersByAccountID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransfersByAccountID", reflect.TypeOf((*MockAccountRepo)(nil).GetTransfersByAccountID), arg0, arg1, arg2)
}

// UpdateAccountBalance mocks base method.
func (m *MockAccountRepo) UpdateAccountBalance(arg0 context.Context, arg1 int64, arg2 float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountBalance", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAccountBalance indicates an expected call of UpdateAccountBalance.
func (mr *MockAccountRepoMockRecorder) UpdateAccountBalance(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountBalance", reflect.TypeOf((*MockAccountRepo)(nil).UpdateAccountBalance), arg0, arg1, arg2)
}

// MockAuthRepo is a mock of AuthRepo interface.
type MockAuthRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAuthRepoMockRecorder
}

// MockAuthRepoMockRecorder is the mock recorder for MockAuthRepo.
type MockAuthRepoMockRecorder struct {
	mock *MockAuthRepo
}

// NewMockAuthRepo creates a new mock instance.
func NewMockAuthRepo(ctrl *gomock.Controller) *MockAuthRepo {
	mock := &MockAuthRepo{ctrl: ctrl}
	mock.recorder = &MockAuthRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthRepo) EXPECT() *MockAuthRepoMockRecorder {
	return m.recorder
}

// CreateSession mocks base method.
func (m *MockAuthRepo) CreateSession(arg0 context.Context, arg1 entity.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockAuthRepoMockRecorder) CreateSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockAuthRepo)(nil).CreateSession), arg0, arg1)
}

// GetSessionByUUID mocks base method.
func (m *MockAuthRepo) GetSessionByUUID(arg0 context.Context, arg1 string) (entity.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionByUUID", arg0, arg1)
	ret0, _ := ret[0].(entity.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionByUUID indicates an expected call of GetSessionByUUID.
func (mr *MockAuthRepoMockRecorder) GetSessionByUUID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionByUUID", reflect.TypeOf((*MockAuthRepo)(nil).GetSessionByUUID), arg0, arg1)
}

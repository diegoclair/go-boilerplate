// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/diegoclair/go_boilerplate/domain/contract (interfaces: CacheManager)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockCacheManager is a mock of CacheManager interface.
type MockCacheManager struct {
	ctrl     *gomock.Controller
	recorder *MockCacheManagerMockRecorder
}

// MockCacheManagerMockRecorder is the mock recorder for MockCacheManager.
type MockCacheManagerMockRecorder struct {
	mock *MockCacheManager
}

// NewMockCacheManager creates a new mock instance.
func NewMockCacheManager(ctrl *gomock.Controller) *MockCacheManager {
	mock := &MockCacheManager{ctrl: ctrl}
	mock.recorder = &MockCacheManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheManager) EXPECT() *MockCacheManagerMockRecorder {
	return m.recorder
}

// CleanAll mocks base method.
func (m *MockCacheManager) CleanAll() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanAll")
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanAll indicates an expected call of CleanAll.
func (mr *MockCacheManagerMockRecorder) CleanAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanAll", reflect.TypeOf((*MockCacheManager)(nil).CleanAll))
}

// Delete mocks base method.
func (m *MockCacheManager) Delete(arg0 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCacheManagerMockRecorder) Delete(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCacheManager)(nil).Delete), arg0...)
}

// GetExpiration mocks base method.
func (m *MockCacheManager) GetExpiration(arg0 string) (time.Duration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpiration", arg0)
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpiration indicates an expected call of GetExpiration.
func (mr *MockCacheManagerMockRecorder) GetExpiration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpiration", reflect.TypeOf((*MockCacheManager)(nil).GetExpiration), arg0)
}

// GetInt mocks base method.
func (m *MockCacheManager) GetInt(arg0 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInt", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInt indicates an expected call of GetInt.
func (mr *MockCacheManagerMockRecorder) GetInt(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInt", reflect.TypeOf((*MockCacheManager)(nil).GetInt), arg0)
}

// GetItem mocks base method.
func (m *MockCacheManager) GetItem(arg0 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItem", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItem indicates an expected call of GetItem.
func (mr *MockCacheManagerMockRecorder) GetItem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItem", reflect.TypeOf((*MockCacheManager)(nil).GetItem), arg0)
}

// GetString mocks base method.
func (m *MockCacheManager) GetString(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetString", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetString indicates an expected call of GetString.
func (mr *MockCacheManagerMockRecorder) GetString(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetString", reflect.TypeOf((*MockCacheManager)(nil).GetString), arg0)
}

// GetStruct mocks base method.
func (m *MockCacheManager) GetStruct(arg0 string, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStruct", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetStruct indicates an expected call of GetStruct.
func (mr *MockCacheManagerMockRecorder) GetStruct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStruct", reflect.TypeOf((*MockCacheManager)(nil).GetStruct), arg0, arg1)
}

// Increase mocks base method.
func (m *MockCacheManager) Increase(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Increase", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Increase indicates an expected call of Increase.
func (mr *MockCacheManagerMockRecorder) Increase(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Increase", reflect.TypeOf((*MockCacheManager)(nil).Increase), arg0)
}

// SetExpiration mocks base method.
func (m *MockCacheManager) SetExpiration(arg0 string, arg1 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetExpiration", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetExpiration indicates an expected call of SetExpiration.
func (mr *MockCacheManagerMockRecorder) SetExpiration(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetExpiration", reflect.TypeOf((*MockCacheManager)(nil).SetExpiration), arg0, arg1)
}

// SetItem mocks base method.
func (m *MockCacheManager) SetItem(arg0 string, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetItem", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetItem indicates an expected call of SetItem.
func (mr *MockCacheManagerMockRecorder) SetItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetItem", reflect.TypeOf((*MockCacheManager)(nil).SetItem), arg0, arg1)
}

// SetItemWithExpiration mocks base method.
func (m *MockCacheManager) SetItemWithExpiration(arg0 string, arg1 []byte, arg2 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetItemWithExpiration", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetItemWithExpiration indicates an expected call of SetItemWithExpiration.
func (mr *MockCacheManagerMockRecorder) SetItemWithExpiration(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetItemWithExpiration", reflect.TypeOf((*MockCacheManager)(nil).SetItemWithExpiration), arg0, arg1, arg2)
}

// SetString mocks base method.
func (m *MockCacheManager) SetString(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetString", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetString indicates an expected call of SetString.
func (mr *MockCacheManagerMockRecorder) SetString(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetString", reflect.TypeOf((*MockCacheManager)(nil).SetString), arg0, arg1)
}

// SetStringWithExpiration mocks base method.
func (m *MockCacheManager) SetStringWithExpiration(arg0, arg1 string, arg2 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStringWithExpiration", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStringWithExpiration indicates an expected call of SetStringWithExpiration.
func (mr *MockCacheManagerMockRecorder) SetStringWithExpiration(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStringWithExpiration", reflect.TypeOf((*MockCacheManager)(nil).SetStringWithExpiration), arg0, arg1, arg2)
}

// SetStruct mocks base method.
func (m *MockCacheManager) SetStruct(arg0 string, arg1 interface{}, arg2 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStruct", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStruct indicates an expected call of SetStruct.
func (mr *MockCacheManagerMockRecorder) SetStruct(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStruct", reflect.TypeOf((*MockCacheManager)(nil).SetStruct), arg0, arg1, arg2)
}

// SetStructWithExpiration mocks base method.
func (m *MockCacheManager) SetStructWithExpiration(arg0 string, arg1 interface{}, arg2 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStructWithExpiration", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStructWithExpiration indicates an expected call of SetStructWithExpiration.
func (mr *MockCacheManagerMockRecorder) SetStructWithExpiration(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStructWithExpiration", reflect.TypeOf((*MockCacheManager)(nil).SetStructWithExpiration), arg0, arg1, arg2)
}
